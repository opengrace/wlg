/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN DevicesActionsGenerated.js PLEASE EDIT ../DevicesActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import DevicesApi from "../../../api/DevicesApi";

let actionsFunction = {

  //CRUD METHODS

  // Create devices
  createDevices: function(devices) {
    return function(dispatch) {
      return DevicesApi
        .createDevices(devices)
        .then(devices => {
          dispatch(actionsFunction.createDevicesSuccess(devices));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createDevicesSuccess: function(devices) {
    return { type: types.CREATE_DEVICES_SUCCESS, payload: devices };
  },


  // Delete devices
  deleteDevices: function(id) {
    return function(dispatch) {
      return DevicesApi
        .deleteDevices(id)
        .then(devices => {
          dispatch(actionsFunction.deleteDevicesSuccess(devices));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteDevicesSuccess: function(devices) {
    return { type: types.DELETE_DEVICES_SUCCESS, payload: devices };
  },


  // Find by _gps
  findBy_gps: function(key) {
    return function(dispatch) {
      return DevicesApi
        .findBy_gps(key)
        .then(item => {
          dispatch(actionsFunction.findBy_gpsSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findBy_gpsSuccess: function(item) {
    return { type: types.FINDBY_GPS_DEVICES_SUCCESS, payload: item };
  },


  // Find by _sim
  findBy_sim: function(key) {
    return function(dispatch) {
      return DevicesApi
        .findBy_sim(key)
        .then(item => {
          dispatch(actionsFunction.findBy_simSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findBy_simSuccess: function(item) {
    return { type: types.FINDBY_SIM_DEVICES_SUCCESS, payload: item };
  },


  // Get devices
  loadDevices: function(id) {
    return function(dispatch) {
      return DevicesApi
        .getOneDevices(id)
        .then(devices => {
          dispatch(actionsFunction.loadDevicesSuccess(devices));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadDevicesSuccess: function(devices) {
    return { type: types.GET_DEVICES_SUCCESS, payload: devices };
  },

  // Load  list
  loadDevicesList: function() {
    return function(dispatch) {
      return DevicesApi
        .getDevicesList()
        .then(list => {
          dispatch(actionsFunction.loadDevicesListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadDevicesListSuccess: function(list) {
    return { type: types.LIST_DEVICES_SUCCESS, payload: list };
  },

	
  // Save devices
  saveDevices: function(devices) {
    return function(dispatch) {
      return DevicesApi
        .saveDevices(devices)
        .then(devices => {
          dispatch(actionsFunction.saveDevicesSuccess(devices));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveDevicesSuccess: function(devices) {
    return { type: types.UPDATE_DEVICES_SUCCESS, payload: devices };
  },


};

export default actionsFunction;
